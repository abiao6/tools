package ${facadePackage};

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;
import com.tjcloud.dubbo.facade.AbstractFacade;
import ${entityClass};
import ${serviceClass};
import com.tjcloud.exception.BusinessException;
import com.tjcloud.page.Pagination;
import com.tjcloud.response.ResponseResult;
import com.tjcloud.utils.ValidateUtils;
import com.tjcloud.web.utils.ServletUtils;

@RestController
@RequestMapping("/${tabName}s")
public class ${facadeClassName} extends AbstractFacade {
	private static final Logger logger = LoggerFactory.getLogger(${facadeClassName}.class);

	@Autowired
	private ${serviceClassName} ${lowerServiceClassName};

	@RequestMapping(method = RequestMethod.GET)
	public ResponseResult query(HttpServletRequest request) throws BusinessException {
		Pagination<${className}> dataList = ServletUtils.getPagination(request, ${lowerServiceClassName});
		return ResponseResult.getResponse().setData(dataList);
	}

	@RequestMapping(value = "{id:\\w+}", method = RequestMethod.GET)
	public ResponseResult get(@PathVariable("id") String id) throws BusinessException {
		logger.debug("~~~~~ get param id = ({})", id);

		${className} ${lowerClassName} = ${lowerServiceClassName}.get(id);

		logger.debug("~~~~~ get result = {}, param id is ({})", JSON.toJSONString(${lowerClassName}), id);
		return ResponseResult.getResponse().setData(${lowerClassName});
	}

	@RequestMapping(method = RequestMethod.POST)
	public ResponseResult create(${className} ${lowerClassName}) throws BusinessException {
		logger.debug("~~~~~ post param = {}", JSON.toJSONString(${lowerClassName}));

		ValidateUtils.notNull(${lowerClassName});
		ValidateUtils.notEmpty(${lowerClassName}.getId());
		${className} data = ${lowerServiceClassName}.create(${lowerClassName});
		return ResponseResult.getResponse().setData(data);
	}

	@RequestMapping(method = RequestMethod.PUT)
	public ResponseResult modify(${className} ${lowerClassName}) throws BusinessException {
		logger.debug("~~~~~ put param = {}", JSON.toJSONString(${lowerClassName}));

		ValidateUtils.notNull(${lowerClassName});
		ValidateUtils.notEmpty(${lowerClassName}.getId());
		int count = ${lowerServiceClassName}.modify(${lowerClassName});
		
		return ResponseResult.getResponse().setData(count);
	}

	@RequestMapping(value = "{id:\\w+}", method = RequestMethod.DELETE)
	public void remove(@PathVariable("id") String id) throws BusinessException {
		logger.debug("~~~~~ delete param id = ({})", id);
	}
}
