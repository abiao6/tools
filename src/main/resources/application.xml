<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/task
         http://www.springframework.org/schema/task/spring-task.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd" default-autowire="byName">

	<task:annotation-driven/>
	
	<context:annotation-config/>
	<context:property-placeholder location="classpath:datasource.properties" />
	<context:component-scan base-package="com.banksteel" />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 最大并发连接数，缺省值为8 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 获取连接时最大等待超时的时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 超过时间限制多长； -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />

		<!-- 有些数据库连接的时候有超时限制（MySQL连接在8小时后断开），或者由于网络中断等原因，连接池的连接会出现失效的情况，这时候可以设置一个testWhileIdle参数为true， 
			如果检测到当前连接不活跃的时间超过了timeBetweenEvictionRunsMillis，则去手动检测一下当前连接的有效性，在保证确实有效后才加以使用。 
			在检测活跃性时，如果当前的活跃时间大于minEvictableIdleTimeMillis，则认为需要关闭当前连接。当 然，为了保证绝对的可用性，你也可以使用testOnBorrow为true（即在每次获取Connection对象时都检测其可用性），不过这样会影响性能。 -->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒（3600000:为1小时） -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒(300000:为5分钟) -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能。缺省值:true -->
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能。缺省值:false -->
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。缺省值:false -->
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100。-->
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall -->
		<!-- <property name="filters" value="${jdbc.filters}" /> -->
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:mybatis/mapper/*-mapper.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="dbUtils" class="com.banksteel.tools.utils.DBUtils">
		<!-- 数据库字段类型替换 -->
		<property name="replaceTypeMap">
			<map>
				<entry key="java.sql.Timestamp">
					<value>java.util.Date</value>
				</entry>
				<entry key="float">
					<value>java.lang.String</value>
				</entry>
				<entry key="int">
					<value>java.lang.String</value>
				</entry>
				<entry key="double">
					<value>java.lang.String</value>
				</entry>
				<entry key="long">
					<value>java.lang.String</value>
				</entry>
				<entry key="NUMBER">
					<value>java.lang.String</value>
				</entry>
				<entry key="java.math.BigDecimal">
					<value>java.lang.String</value>
				</entry>
				<entry key="oracle.sql.CLOB">
					<value>java.lang.String</value>
				</entry>
			</map>
		</property>
	</bean>
	
	<!--===================================================================== -->
	<!-- 定义需要生成代码的模块 -->
	<!--===================================================================== -->
	<bean id="module" class="com.banksteel.tools.model.Module">
		<property name="name" value="ima.base"/>
		<property name="logData" value="true"/>
		<property name="pkType" value="String"/>
		<property name="tablePrefix" value="ima"/>
		<!-- 配置表名集合 -->
		<property name="tableNames">
			<list>
				<value>field_img</value>
				<!-- <value>uac_account</value>
				<value>uac_holiday</value>
				<value>uac_menu</value>
				<value>uac_operation</value>
				<value>uac_operation_resource</value>
				<value>uac_recharge_card</value>
				<value>uac_recharge_card_group</value>
				<value>uac_resource</value>
				<value>uac_role</value>
				<value>uac_role_menu_operation</value>
				<value>uac_tenant_user</value>
				<value>uac_user</value>
				<value>uac_user_role</value>
				<value>uac_user_stadium_item</value> -->
			</list>
		</property>
		<property name="ignoreTables">
			<list>
				<value>uac_auth</value>
			</list>
		</property>
		<property name="ignoreColumns">
			<list>
				<value>id</value>
				<value>uuid</value>
				<value>locked</value>
				<value>version</value>
				<value>lastAccess</value>
				<value>creatorId</value>
				<value>createdBy</value>
				<value>createdTime</value>
				<value>updaterId</value>
				<value>updatedBy</value>
			</list>
		</property>
	</bean>
</beans>